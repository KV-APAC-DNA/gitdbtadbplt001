{{
    config(
        materialized="incremental",
        incremental_strategy= "append",
        sql_header="USE WAREHOUSE "+ env_var("DBT_ENV_CORE_DB_MEDIUM_WH")+ ";"
        )
}}


with edw_time_dim as(
    select * from {{ source('pcfedw_integration', 'edw_time_dim') }}
),
vw_demand_forecast_analysis as(
    select * from {{ ref('pcfedw_integration__vw_demand_forecast_analysis') }}
),
vdfa as (
    select
        pac_source_type,
        pac_subsource_type,
        convert_timezone('UTC', current_timestamp)::date as snap_shot_dt,
        jj_period,
        jj_week_no,
        jj_wk,
        jj_mnth,
        jj_mnth_shrt,
        jj_mnth_long,
        jj_qrtr,
        jj_year,
        jj_mnth_tot,
        matl_no,
        matl_desc,
        master_code,
        parent_id,
        parent_matl_desc,
        mega_brnd_cd,
        mega_brnd_desc,
        brnd_cd,
        brnd_desc,
        base_prod_cd,
        base_prod_desc,
        variant_cd,
        variant_desc,
        fran_cd,
        fran_desc,
        grp_fran_cd,
        grp_fran_desc,
        matl_type_cd,
        matl_type_desc,
        prod_fran_cd,
        prod_fran_desc,
        prod_hier_cd,
        prod_hier_desc,
        prod_mjr_cd,
        prod_mjr_desc,
        prod_mnr_cd,
        prod_mnr_desc,
        mercia_plan,
        putup_cd,
        putup_desc,
        bar_cd,
        cust_no,
        cmp_id,
        ctry_key,
        country,
        state_cd,
        post_cd,
        cust_suburb,
        cust_nm,
        fcst_chnl,
        fcst_chnl_desc,
        sales_office_cd,
        sales_office_desc,
        sales_grp_cd,
        sales_grp_desc,
        curr_cd,
        actual_sales_qty,
        apo_tot_frcst,
        apo_base_frcst,
        apo_promo_frcst,
        px_tot_frcst,
        px_base_frcst,
        px_promo_frcst
    from vw_demand_forecast_analysis where pac_subsource_type!='SAPBW_ACTUAL'
),
etd as(
    select
        convert_timezone('UTC', current_timestamp)::date as snapshot_date,
        etd.jj_wk as snapshot_week_no,
        etdw.row_number as snapshot_mnth_week_no,
        etd.jj_mnth_shrt as snapshot_mnth_shrt,
        etd.jj_year as snapshot_year
    from (select *, row_number()  over
    (partition by jj_mnth_id order by jj_wk asc) as row_number from (select distinct jj_mnth_id,jj_wk from edw_time_dim)) etdw,
    edw_time_dim etd where etd.time_id=to_char(current_timestamp(),'YYYYMMDD')::number(18,0) and 
    etdw.jj_mnth_id=etd.jj_mnth_id and etdw.jj_wk=etd.jj_wk
),
union1 as(
    select
        vdfa.pac_source_type,
        vdfa.pac_subsource_type,
        vdfa.snap_shot_dt,
        etd.snapshot_week_no,
        etd.snapshot_mnth_week_no,
        etd.snapshot_mnth_shrt,
        etd.snapshot_year,
        case 
        when snapshot_week_no in (2,6,10,15,19,23,28,32,36,41,45,49) 
        then 'Y' 
        else 'N'
        end as final_version_indicator,
        vdfa.jj_period,
        vdfa.jj_week_no,
        vdfa.jj_wk,
        vdfa.jj_mnth,
        vdfa.jj_mnth_shrt,
        vdfa.jj_mnth_long,
        vdfa.jj_qrtr,
        vdfa.jj_year,
        vdfa.jj_mnth_tot,
        vdfa.matl_no,
        vdfa.matl_desc,
        vdfa.master_code,
        vdfa.parent_id,
        vdfa.parent_matl_desc,
        vdfa.mega_brnd_cd,
        vdfa.mega_brnd_desc,
        vdfa.brnd_cd,
        vdfa.brnd_desc,
        vdfa.base_prod_cd,
        vdfa.base_prod_desc,
        vdfa.variant_cd,
        vdfa.variant_desc,
        vdfa.fran_cd,
        vdfa.fran_desc,
        vdfa.grp_fran_cd,
        vdfa.grp_fran_desc,
        vdfa.matl_type_cd,
        vdfa.matl_type_desc,
        vdfa.prod_fran_cd,
        vdfa.prod_fran_desc,
        vdfa.prod_hier_cd,
        vdfa.prod_hier_desc,
        vdfa.prod_mjr_cd,
        vdfa.prod_mjr_desc,
        vdfa.prod_mnr_cd,
        vdfa.prod_mnr_desc,
        vdfa.mercia_plan,
        vdfa.putup_cd,
        vdfa.putup_desc,
        vdfa.bar_cd,
        vdfa.cust_no,
        vdfa.cmp_id,
        vdfa.ctry_key,
        vdfa.country,
        vdfa.state_cd,
        vdfa.post_cd,
        vdfa.cust_suburb,
        vdfa.cust_nm,
        vdfa.fcst_chnl,
        vdfa.fcst_chnl_desc,
        vdfa.sales_office_cd,
        vdfa.sales_office_desc,
        vdfa.sales_grp_cd,
        vdfa.sales_grp_desc,
        vdfa.curr_cd,
        vdfa.actual_sales_qty,
        vdfa.apo_tot_frcst,
        vdfa.apo_base_frcst,
        vdfa.apo_promo_frcst,
        vdfa.px_tot_frcst,
        vdfa.px_base_frcst,
        vdfa.px_promo_frcst,
        null as count
    from vdfa, etd
    where vdfa.snap_shot_dt::date=etd.snapshot_date::date
),
vdfaa as (
     SELECT
        PAC_SOURCE_TYPE,
        PAC_SUBSOURCE_TYPE,
        convert_timezone('UTC', current_timestamp)::date as SNAP_SHOT_DT,
        JJ_PERIOD,
        JJ_WEEK_NO,
        JJ_WK,
        JJ_MNTH,
        JJ_MNTH_SHRT,
        JJ_MNTH_LONG,
        JJ_QRTR,
        JJ_YEAR,
        JJ_MNTH_TOT,
        MATL_NO,
        MATL_DESC,
        MASTER_CODE,
        PARENT_ID,
        PARENT_MATL_DESC,
        MEGA_BRND_CD,
        MEGA_BRND_DESC,
        BRND_CD,
        BRND_DESC,
        BASE_PROD_CD,
        BASE_PROD_DESC,
        VARIANT_CD,
        VARIANT_DESC,
        FRAN_CD,
        FRAN_DESC,
        GRP_FRAN_CD,
        GRP_FRAN_DESC,
        MATL_TYPE_CD,
        MATL_TYPE_DESC,
        PROD_FRAN_CD,
        PROD_FRAN_DESC,
        PROD_HIER_CD,
        PROD_HIER_DESC,
        PROD_MJR_CD,
        PROD_MJR_DESC,
        PROD_MNR_CD,
        PROD_MNR_DESC,
        MERCIA_PLAN,
        PUTUP_CD,
        PUTUP_DESC,
        BAR_CD,
        CUST_NO,
        CMP_ID,
        CTRY_KEY,
        COUNTRY,
        STATE_CD,
        POST_CD,
        CUST_SUBURB,
        CUST_NM,
        FCST_CHNL,
        FCST_CHNL_DESC,
        SALES_OFFICE_CD,
        SALES_OFFICE_DESC,
        SALES_GRP_CD,
        SALES_GRP_DESC,
        CURR_CD,
        (CASE WHEN JJ_PERIOD <= PROJPRD.PREV_JJ_PERIOD THEN ACTUAL_SALES_QTY ELSE 0 END) AS ACTUAL_SALES_QTY,
        APO_TOT_FRCST,
        APO_BASE_FRCST,
        APO_PROMO_FRCST,
        PX_TOT_FRCST,
        PX_BASE_FRCST,
        PX_PROMO_FRCST
    FROM VW_DEMAND_FORECAST_ANALYSIS, 
    (SELECT TO_NUMBER(TO_CHAR(DATEADD('month', -1, TO_DATE('202312'::STRING, 'YYYYMM')), 'YYYYMM')) 
    AS PREV_JJ_PERIOD FROM EDW_TIME_DIM T1 WHERE CAL_DATE::date = left((convert_timezone('UTC', current_timestamp)::date+1),10)::date) PROJPRD
    WHERE PAC_SUBSOURCE_TYPE='SAPBW_ACTUAL'
),
etdd as(
    SELECT
        convert_timezone('UTC', current_timestamp)::date as SNAPSHOT_DATE,
        ETD.JJ_WK AS SNAPSHOT_WEEK_NO,
        ETDW.ROW_NUMBER AS SNAPSHOT_MNTH_WEEK_NO,
        ETD.JJ_MNTH_SHRT AS SNAPSHOT_MNTH_SHRT,
        ETD.JJ_YEAR AS SNAPSHOT_YEAR
    FROM (SELECT *, ROW_NUMBER()  OVER
    (PARTITION BY JJ_MNTH_ID ORDER BY JJ_WK ASC) as ROW_NUMBER FROM (SELECT DISTINCT JJ_MNTH_ID,JJ_WK FROM EDW_TIME_DIM)) ETDW,
    EDW_TIME_DIM ETD WHERE ETD.JJ_WK IN (2,6,10,15,19,23,28,32,36,41,45,49)
    AND ETD.TIME_ID=TO_CHAR(current_timestamp(),'YYYYMMDD')::number(17,0) AND 
    ETDW.JJ_MNTH_ID=ETD.JJ_MNTH_ID AND ETDW.JJ_WK=ETD.JJ_WK
),
union2 as(
    SELECT
        vdfaa.PAC_SOURCE_TYPE,
        vdfaa.PAC_SUBSOURCE_TYPE,
        vdfaa.SNAP_SHOT_DT,
        etdd.SNAPSHOT_WEEK_NO,
        etdd.SNAPSHOT_MNTH_WEEK_NO,
        etdd.SNAPSHOT_MNTH_SHRT,
        etdd.SNAPSHOT_YEAR,
        'Y' FINAL_VERSION_INDICATOR,
        vdfaa.JJ_PERIOD,
        vdfaa.JJ_WEEK_NO,
        vdfaa.JJ_WK,
        vdfaa.JJ_MNTH,
        vdfaa.JJ_MNTH_SHRT,
        vdfaa.JJ_MNTH_LONG,
        vdfaa.JJ_QRTR,
        vdfaa.JJ_YEAR,
        vdfaa.JJ_MNTH_TOT,
        vdfaa.MATL_NO,
        vdfaa.MATL_DESC,
        vdfaa.MASTER_CODE,
        vdfaa.PARENT_ID,
        vdfaa.PARENT_MATL_DESC,
        vdfaa.MEGA_BRND_CD,
        vdfaa.MEGA_BRND_DESC,
        vdfaa.BRND_CD,
        vdfaa.BRND_DESC,
        vdfaa.BASE_PROD_CD,
        vdfaa.BASE_PROD_DESC,
        vdfaa.VARIANT_CD,
        vdfaa.VARIANT_DESC,
        vdfaa.FRAN_CD,
        vdfaa.FRAN_DESC,
        vdfaa.GRP_FRAN_CD,
        vdfaa.GRP_FRAN_DESC,
        vdfaa.MATL_TYPE_CD,
        vdfaa.MATL_TYPE_DESC,
        vdfaa.PROD_FRAN_CD,
        vdfaa.PROD_FRAN_DESC,
        vdfaa.PROD_HIER_CD,
        vdfaa.PROD_HIER_DESC,
        vdfaa.PROD_MJR_CD,
        vdfaa.PROD_MJR_DESC,
        vdfaa.PROD_MNR_CD,
        vdfaa.PROD_MNR_DESC,
        vdfaa.MERCIA_PLAN,
        vdfaa.PUTUP_CD,
        vdfaa.PUTUP_DESC,
        vdfaa.BAR_CD,
        vdfaa.CUST_NO,
        vdfaa.CMP_ID,
        vdfaa.CTRY_KEY,
        vdfaa.COUNTRY,
        vdfaa.STATE_CD,
        vdfaa.POST_CD,
        vdfaa.CUST_SUBURB,
        vdfaa.CUST_NM,
        vdfaa.FCST_CHNL,
        vdfaa.FCST_CHNL_DESC,
        vdfaa.SALES_OFFICE_CD,
        vdfaa.SALES_OFFICE_DESC,
        vdfaa.SALES_GRP_CD,
        vdfaa.SALES_GRP_DESC,
        vdfaa.CURR_CD,
        vdfaa.ACTUAL_SALES_QTY,
        vdfaa.APO_TOT_FRCST,
        vdfaa.APO_BASE_FRCST,
        vdfaa.APO_PROMO_FRCST,
        vdfaa.PX_TOT_FRCST,
        vdfaa.PX_BASE_FRCST,
        vdfaa.PX_PROMO_FRCST,
        null as count
    FROM VDFAA, ETDD
    WHERE (VDFAA.SNAP_SHOT_DT)::date=(ETDD.SNAPSHOT_DATE)::date
),
final as(
    select * from union1
    union all
    select * from union2
    {% if is_incremental() %}
    -- this filter will only be applied on an incremental run
    where snap_shot_dt > (select max(snap_shot_dt) from {{ this }}) 
    {% endif %}
)
select * from final